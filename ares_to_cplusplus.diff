 rutil/compat.hxx                 |   1 +
 rutil/dns/AresDns.hxx            |  13 +--
 rutil/dns/LocalDns.cxx           |   4 +-
 rutil/dns/LocalDns.hxx           |   2 +-
 rutil/dns/ares/Makefile.am       |  20 ++--
 rutil/dns/ares/ares.h            | 201 ++++++++++++++++++------------------
 rutil/dns/ares/ares_15_0.vcxproj |  53 +++++-----
 rutil/dns/ares/ares_16_0.vcxproj |  71 +++++++------
 rutil/dns/ares/ares_17_0.vcxproj |  68 +++++++------
 rutil/dns/ares/ares_local.h      |  21 ++--
 rutil/dns/ares/ares_private.h    | 215 ++++++++++++++++++++-------------------
 rutil/dns/ares/ares_socketfunc.h |   6 +-
 rutil/rutil_17_0.vcxproj         |  14 ++-
 13 files changed, 367 insertions(+), 322 deletions(-)

diff --git a/rutil/compat.hxx b/rutil/compat.hxx
index b5d5b0866..5d925adc8 100644
--- a/rutil/compat.hxx
+++ b/rutil/compat.hxx
@@ -47,6 +47,7 @@
 #endif
 #  include <windows.h>
 #  include <winsock2.h>
+#  include <stdint.h>
 #undef WIN32_LEAN_AND_MEAN
 #  include <errno.h>
 #  include <io.h>
diff --git a/rutil/dns/AresDns.hxx b/rutil/dns/AresDns.hxx
index 8921daf41..5a1dca9e8 100644
--- a/rutil/dns/AresDns.hxx
+++ b/rutil/dns/AresDns.hxx
@@ -5,17 +5,10 @@
 #include "rutil/GenericIPAddress.hxx"
 #include "rutil/dns/ExternalDns.hxx"
 
-extern "C"
-{
-struct ares_channeldata;
-}
 
-//struct fd_set;
 
-extern "C" {
-  void resip_AresDns_aresCallback(void *arg, int status, unsigned char* abuf, int alen);
-  void resip_AresDns_caresCallback(void *arg, int status, int timeouts, unsigned char* abuf, int alen);
-}
+void resip_AresDns_aresCallback(void *arg, int status, unsigned char* abuf, int alen);
+void resip_AresDns_caresCallback(void *arg, int status, int timeouts, unsigned char* abuf, int alen);
 
 namespace resip
 {
@@ -35,7 +28,7 @@ class AresDns : public ExternalDns, public FdSetIOObserver
       virtual int init(int dnsTimeout = 0, int dnsTries = 0, unsigned int features = 0);
 
       int internalInit(const std::vector<GenericIPAddress>& additionalNameservers,
-                       AfterSocketCreationFuncPtr socketfunc, unsigned int features=0, ares_channeldata** channel = 0, int timeout=0, int tries=0);
+                       AfterSocketCreationFuncPtr socketfunc, unsigned int features=0, struct ares_channeldata** channel = 0, int timeout=0, int tries=0);
 
       virtual bool checkDnsChange();
 
diff --git a/rutil/dns/LocalDns.cxx b/rutil/dns/LocalDns.cxx
index 173c610dd..60f15ec34 100644
--- a/rutil/dns/LocalDns.cxx
+++ b/rutil/dns/LocalDns.cxx
@@ -25,7 +25,7 @@ int
 LocalDns::init()
 {
    int status;
-   if ((status = ares_init(&mChannel)) != ARES_SUCCESS)
+   if ((status = ares_init((ares_channel *)&mChannel)) != ARES_SUCCESS)
    {
       return status;
    }
@@ -93,7 +93,7 @@ void
 LocalDns::lookup(const char* target, unsigned short type, ExternalDnsHandler* handler, void* userData)
 {
    mTarget = target;
-   ares_query(mChannel, target, C_IN, type, LocalDns::localCallback, new Payload(handler, userData));
+   ares_query((ares_channel)mChannel, target, C_IN, type, LocalDns::localCallback, new Payload(handler, userData));
 }
 
 void LocalDns::message(const char* file, unsigned char* buf, int& len)
diff --git a/rutil/dns/LocalDns.hxx b/rutil/dns/LocalDns.hxx
index 87a053dc1..1f132c742 100644
--- a/rutil/dns/LocalDns.hxx
+++ b/rutil/dns/LocalDns.hxx
@@ -47,7 +47,7 @@ class LocalDns : public ExternalDns
 
    private:
 
-	   struct ares_channeldata* mChannel;
+	  struct ares_channeldata* mChannel;
 
       typedef std::pair<ExternalDnsHandler*, void*> Payload;
       static ExternalDnsRawResult makeRawResult(void *arg, int status, unsigned char *abuf, int alen);
diff --git a/rutil/dns/ares/Makefile.am b/rutil/dns/ares/Makefile.am
index 318c93634..1de7e3c08 100644
--- a/rutil/dns/ares/Makefile.am
+++ b/rutil/dns/ares/Makefile.am
@@ -9,12 +9,12 @@ if MACOSX
 libresipares_la_LDFLAGS += -framework SystemConfiguration
 endif
 libresipares_la_SOURCES = \
-	ares__close_sockets.c ares__get_hostent.c ares__read_line.c \
-	ares_destroy.c ares_expand_name.c ares_fds.c ares_free_errmem.c \
-	ares_free_hostent.c ares_free_string.c ares_gethostbyaddr.c \
-	ares_gethostbyname.c ares_init.c ares_mkquery.c ares_parse_a_reply.c \
-	ares_parse_ptr_reply.c ares_process.c ares_query.c ares_search.c \
-	ares_send.c ares_strerror.c ares_timeout.c ares_local.c
+	ares__close_sockets.cxx ares__get_hostent.cxx ares__read_line.cxx \
+	ares_destroy.cxx ares_expand_name.cxx ares_fds.cxx ares_free_errmem.cxx \
+	ares_free_hostent.cxx ares_free_string.cxx ares_gethostbyaddr.cxx \
+	ares_gethostbyname.cxx ares_init.cxx ares_mkquery.cxx ares_parse_a_reply.cxx \
+	ares_parse_ptr_reply.cxx ares_process.cxx ares_query.cxx ares_search.cxx \
+	ares_send.cxx ares_strerror.cxx ares_timeout.cxx ares_local.cxx
 
 libresipares_ladir = $(includedir)/rutil/dns/ares
 libresipares_la_HEADERS =\
@@ -35,18 +35,18 @@ EXTRA_DIST += *.vcxproj
 
 EXTRA_PROGRAMS = adig ahost aresfuzz aresfuzzname
 
-adig_SOURCES = adig.c
+adig_SOURCES = adig.cxx
 adig_LDADD = libresipares.la
 
-ahost_SOURCES = ahost.c
+ahost_SOURCES = ahost.cxx
 ahost_LDADD = libresipares.la
 
-aresfuzz_SOURCES = ares-test-fuzz.c
+aresfuzz_SOURCES = ares-test-fuzz.cxx
 aresfuzz_LDFLAGS = ${LIB_FUZZING_ENGINE}
 aresfuzz_LDADD = libresipares.la
 nodist_EXTRA_aresfuzz_SOURCES = dummy.cpp # Enforce C++ linking
 
-aresfuzzname_SOURCES = ares-test-fuzz-name.c
+aresfuzzname_SOURCES = ares-test-fuzz-name.cxx
 aresfuzzname_LDFLAGS = ${LIB_FUZZING_ENGINE}
 aresfuzzname_LDADD = libresipares.la
 nodist_EXTRA_aresfuzzname_SOURCES = dummy.cpp # Enforce C++ linking
diff --git a/rutil/dns/ares/ares.h b/rutil/dns/ares/ares.h
index 492385068..8a158ef9b 100644
--- a/rutil/dns/ares/ares.h
+++ b/rutil/dns/ares/ares.h
@@ -29,10 +29,13 @@
 	#include <stdio.h>
 	#include <WS2tcpip.h>
    // Remove compiler warnings: "warning C4996: 'xxxxx': The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _xxxxxx."  
-   #define strdup _strdup 
-   #define stricmp _stricmp 
-   #define strnicmp _strnicmp 
-   #define write _write
+
+
+#define strdup _strdup 
+#define stricmp _stricmp 
+#define strnicmp _strnicmp 
+#define write _write
+
 #endif
 
 
@@ -49,10 +52,6 @@
 #  define DNS_RR_TTL(r)             DNS__32BIT((r) + 4)
 #endif
 
-#if defined(__cplusplus)
-extern "C" {
-#endif
-
 #if defined(__APPLE__)
 #include <arpa/nameser.h>
 #if !defined(MAC_OS_X_VERSION_MIN_REQUIRED) || (MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_2)
@@ -67,6 +66,7 @@ extern "C" {
 #ifndef WIN32
 /* why was this commented out?! ah, it was a 'fix for windows' */
 #include <netinet/in.h>
+#include <netdb.h>
 #endif
 
 #include "ares_socketfunc.h"
@@ -117,106 +117,111 @@ extern "C" {
 
 /* Capability mask values */
 
+
 #define ARES_CAP_IPV6 		(1 << 0)
 
-typedef enum ares_poll_action {
-  ARES_POLLACTION_NULL=		(0),
-  ARES_POLLACTION_OPEN=		(1),	// ares just opened this
-  ARES_POLLACTION_CLOSE=	(2),	// ares just closed this
-  ARES_POLLACTION_WRITEON=	(3),	// tell ares when writable
-  ARES_POLLACTION_WRITEOFF=	(4)	// don't tell ares when writable
-} ares_poll_action_t;
-struct ares_channeldata;
-typedef void (ares_poll_cb_func)(void *cb_data, struct ares_channeldata* chan, int sockidx,
-  int fd, int using_tcp, ares_poll_action_t act);
+namespace resip
+{
+
+
+	typedef enum ares_poll_action {
+		ARES_POLLACTION_NULL = (0),
+		ARES_POLLACTION_OPEN = (1),	// ares just opened this
+		ARES_POLLACTION_CLOSE = (2),	// ares just closed this
+		ARES_POLLACTION_WRITEON = (3),	// tell ares when writable
+		ARES_POLLACTION_WRITEOFF = (4)	// don't tell ares when writable
+	} ares_poll_action_t;
+	struct ares_channeldata;
+	typedef void (ares_poll_cb_func)(void *cb_data, struct ares_channeldata* chan, int sockidx,
+		int fd, int using_tcp, ares_poll_action_t act);
 
 #if defined(WIN32) || defined(sun)
-typedef unsigned char u_int8_t;
+	typedef unsigned char u_int8_t;
 #endif
 
 #ifdef USE_IPV6
-struct multiFamilyAddr {
-  u_int8_t family;
-  struct in6_addr addr6;
-  struct in_addr addr;
-};
+	struct multiFamilyAddr {
+		u_int8_t family;
+		struct in6_addr addr6;
+		struct in_addr addr;
+	};
 #endif
 
-struct ares_options {
-  int flags;
-  int timeout;
-  int tries;
-  int ndots;
-  unsigned short udp_port;
-  unsigned short tcp_port;
+	struct ares_options {
+		int flags;
+		int timeout;
+		int tries;
+		int ndots;
+		unsigned short udp_port;
+		unsigned short tcp_port;
 #ifdef USE_IPV6
-  struct multiFamilyAddr *servers;
+		struct multiFamilyAddr *servers;
 #else
-  struct in_addr *servers;
+		struct in_addr *servers;
 #endif
-  int nservers;
-  char **domains;
-  int ndomains;
-  char *lookups;
-};
-
-struct hostent;
-struct timeval;
-struct ares_channeldata;
-typedef struct ares_channeldata *ares_channel;
-typedef void (*ares_callback)(void *arg, int status, unsigned char *abuf,
-			      int alen);
-typedef void (*ares_host_callback)(void *arg, int status,
-				   struct hostent *hostent);
-
-extern int ares_init(ares_channel *channelptr);
-extern int ares_init_with_socket_function(ares_channel *channelptr, socket_function_ptr);
-
-extern 	int ares_capabilities(int capmask);
-
-extern 	int ares_init_options(ares_channel *channelptr, struct ares_options *options,
-                              int optmask);
-
-extern 	int ares_init_options_with_socket_function(ares_channel *channelptr, struct ares_options *options,
-                                                   int optmask, socket_function_ptr);
-extern 	void ares_destroy(ares_channel channel);
-extern 	void ares_destroy_suppress_callbacks(ares_channel channel);
-
-extern 	void ares_destroy_internal(ares_channel channel, int suppressCallbacks);
-
-extern 	void ares_send(ares_channel channel, const unsigned char *qbuf, int qlen,
-			ares_callback callback, void *arg);
-extern 	void ares_query(ares_channel channel, const char *name, int dnsclass,
-			int type, ares_callback callback, void *arg);
-extern 	void ares_search(ares_channel channel, const char *name, int dnsclass,
-			int type, ares_callback callback, void *arg);
-extern 	void ares_gethostbyname(ares_channel channel, const char *name, int family,
-				ares_host_callback callback, void *arg);
-extern 	void ares_gethostbyaddr(ares_channel channel, const void *addr, int addrlen,
-				int family, ares_host_callback callback, void *arg);
-extern   int hostfile_lookup(const char *name, struct hostent **host);
-
-extern 	int ares_fds(ares_channel channel, fd_set *read_fds, fd_set *write_fds);
-extern 	struct timeval *ares_timeout(ares_channel channel, struct timeval *maxtv,
-					struct timeval *tv);
-extern 	void ares_process(ares_channel channel, fd_set *read_fds, fd_set *write_fds);
-extern void ares_process_set_poll_cb(ares_channel channel, ares_poll_cb_func* cb_func, void *cb_data);
-extern void ares_process_poll(ares_channel channel, int server_idx,
-        int rdFd, int wrFd, time_t now);
-
-
-extern 	int ares_mkquery(const char *name, int dnsclass, int type, unsigned short id,
-			int rd, unsigned char **buf, int *buflen);
-extern 	int ares_expand_name(const unsigned char *encoded, const unsigned char *abuf,
-				int alen, char **s, long *enclen);
-extern 	int ares_parse_a_reply(const unsigned char *abuf, int alen,
-				struct hostent **host);
-extern 	int ares_parse_ptr_reply(const unsigned char *abuf, int alen, const void *addr,
-				int addrlen, int family, struct hostent **host);
-extern 	void ares_free_string(char *str);
-extern 	void ares_free_hostent(struct hostent *host);
-extern 	const char *ares_strerror(int code);
-extern 	void ares_free_errmem(char *mem);
+		int nservers;
+		char **domains;
+		int ndomains;
+		char *lookups;
+	};
+
+	struct ::hostent;
+	struct ::timeval;
+	struct ares_channeldata;
+	typedef struct ares_channeldata *ares_channel;
+	typedef void(*ares_callback)(void *arg, int status, unsigned char *abuf,
+		int alen);
+	typedef void(*ares_host_callback)(void *arg, int status,
+		struct hostent *hostent);
+
+	extern int ares_init(ares_channel *channelptr);
+	extern int ares_init_with_socket_function(ares_channel *channelptr, socket_function_ptr);
+
+	extern 	int ares_capabilities(int capmask);
+
+	extern 	int ares_init_options(ares_channel *channelptr, struct ares_options *options,
+		int optmask);
+
+	extern 	int ares_init_options_with_socket_function(ares_channel *channelptr, struct ares_options *options,
+		int optmask, socket_function_ptr);
+	extern 	void ares_destroy(ares_channel channel);
+	extern 	void ares_destroy_suppress_callbacks(ares_channel channel);
+
+	extern 	void ares_destroy_internal(ares_channel channel, int suppressCallbacks);
+
+	extern 	void ares_send(ares_channel channel, const unsigned char *qbuf, int qlen,
+		ares_callback callback, void *arg);
+	extern 	void ares_query(ares_channel channel, const char *name, int dnsclass,
+		int type, ares_callback callback, void *arg);
+	extern 	void ares_search(ares_channel channel, const char *name, int dnsclass,
+		int type, ares_callback callback, void *arg);
+	extern 	void ares_gethostbyname(ares_channel channel, const char *name, int family,
+		ares_host_callback callback, void *arg);
+	extern 	void ares_gethostbyaddr(ares_channel channel, const void *addr, int addrlen,
+		int family, ares_host_callback callback, void *arg);
+	extern   int hostfile_lookup(const char *name, struct hostent **host);
+
+	extern 	int ares_fds(ares_channel channel, fd_set *read_fds, fd_set *write_fds);
+	extern 	struct ::timeval *ares_timeout(ares_channel channel, struct ::timeval *maxtv,
+		struct ::timeval *tv);
+	extern 	void ares_process(ares_channel channel, fd_set *read_fds, fd_set *write_fds);
+	extern void ares_process_set_poll_cb(ares_channel channel, ares_poll_cb_func* cb_func, void *cb_data);
+	extern void ares_process_poll(ares_channel channel, int server_idx,
+		int rdFd, int wrFd, time_t now);
+
+
+	extern 	int ares_mkquery(const char *name, int dnsclass, int type, unsigned short id,
+		int rd, unsigned char **buf, int *buflen);
+	extern 	int ares_expand_name(const unsigned char *encoded, const unsigned char *abuf,
+		int alen, char **s, long *enclen);
+	extern 	int ares_parse_a_reply(const unsigned char *abuf, int alen,
+		struct hostent **host);
+	extern 	int ares_parse_ptr_reply(const unsigned char *abuf, int alen, const void *addr,
+		int addrlen, int family, struct hostent **host);
+	extern 	void ares_free_string(char *str);
+	extern 	void ares_free_hostent(struct hostent *host);
+	extern 	const char *ares_strerror(int code);
+	extern 	void ares_free_errmem(char *mem);
 
 
 #if defined(WIN32) || defined (__CYGWIN__) || defined (__ANDROID__)
@@ -295,11 +300,11 @@ extern 	void ares_free_errmem(char *mem);
 #define QUERY 0
 #define MAXLABEL 63
 
+
+
 #endif
 
-#if defined(__cplusplus)
 }
-#endif
 
 
 #endif /* ARES__H */
diff --git a/rutil/dns/ares/ares_15_0.vcxproj b/rutil/dns/ares/ares_15_0.vcxproj
index 1839770f1..85b277f73 100644
--- a/rutil/dns/ares/ares_15_0.vcxproj
+++ b/rutil/dns/ares/ares_15_0.vcxproj
@@ -333,7 +333,8 @@
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
-      <CompileAs>CompileAsC</CompileAs>
+      <CompileAs>CompileAsCpp</CompileAs>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
     </ClCompile>
     <Lib>
       <OutputFile>$(OutDir)$(TargetName)$(TargetExt)</OutputFile>
@@ -431,6 +432,8 @@
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <AdditionalIncludeDirectories>..\..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <CompileAs>CompileAsCpp</CompileAs>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
     </ClCompile>
     <Lib>
       <OutputFile>$(OutDir)$(TargetName)$(TargetExt)</OutputFile>
@@ -452,30 +455,6 @@
       <OutputFile>$(OutDir)$(TargetName)$(TargetExt)</OutputFile>
     </Lib>
   </ItemDefinitionGroup>
-  <ItemGroup>
-    <ClCompile Include="ares__close_sockets.c" />
-    <ClCompile Include="ares__get_hostent.c" />
-    <ClCompile Include="ares__read_line.c" />
-    <ClCompile Include="ares_destroy.c" />
-    <ClCompile Include="ares_expand_name.c" />
-    <ClCompile Include="ares_fds.c" />
-    <ClCompile Include="ares_free_errmem.c" />
-    <ClCompile Include="ares_free_hostent.c" />
-    <ClCompile Include="ares_free_string.c" />
-    <ClCompile Include="ares_gethostbyaddr.c" />
-    <ClCompile Include="ares_gethostbyname.c" />
-    <ClCompile Include="ares_init.c" />
-    <ClCompile Include="ares_local.c" />
-    <ClCompile Include="ares_mkquery.c" />
-    <ClCompile Include="ares_parse_a_reply.c" />
-    <ClCompile Include="ares_parse_ptr_reply.c" />
-    <ClCompile Include="ares_process.c" />
-    <ClCompile Include="ares_query.c" />
-    <ClCompile Include="ares_search.c" />
-    <ClCompile Include="ares_send.c" />
-    <ClCompile Include="ares_strerror.c" />
-    <ClCompile Include="ares_timeout.c" />
-  </ItemGroup>
   <ItemGroup>
     <ClInclude Include="ares.h" />
     <ClInclude Include="ares_compat.h" />
@@ -483,6 +462,30 @@
     <ClInclude Include="ares_local.h" />
     <ClInclude Include="ares_private.h" />
   </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="ares_destroy.cxx" />
+    <ClCompile Include="ares_expand_name.cxx" />
+    <ClCompile Include="ares_fds.cxx" />
+    <ClCompile Include="ares_free_errmem.cxx" />
+    <ClCompile Include="ares_free_hostent.cxx" />
+    <ClCompile Include="ares_free_string.cxx" />
+    <ClCompile Include="ares_gethostbyaddr.cxx" />
+    <ClCompile Include="ares_gethostbyname.cxx" />
+    <ClCompile Include="ares_init.cxx" />
+    <ClCompile Include="ares_local.cxx" />
+    <ClCompile Include="ares_mkquery.cxx" />
+    <ClCompile Include="ares_parse_a_reply.cxx" />
+    <ClCompile Include="ares_parse_ptr_reply.cxx" />
+    <ClCompile Include="ares_process.cxx" />
+    <ClCompile Include="ares_query.cxx" />
+    <ClCompile Include="ares_search.cxx" />
+    <ClCompile Include="ares_send.cxx" />
+    <ClCompile Include="ares_strerror.cxx" />
+    <ClCompile Include="ares_timeout.cxx" />
+    <ClCompile Include="ares__close_sockets.cxx" />
+    <ClCompile Include="ares__get_hostent.cxx" />
+    <ClCompile Include="ares__read_line.cxx" />
+  </ItemGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
   </ImportGroup>
diff --git a/rutil/dns/ares/ares_16_0.vcxproj b/rutil/dns/ares/ares_16_0.vcxproj
index 7963633aa..b21a5fb22 100644
--- a/rutil/dns/ares/ares_16_0.vcxproj
+++ b/rutil/dns/ares/ares_16_0.vcxproj
@@ -50,6 +50,39 @@
       <Platform>x64</Platform>
     </ProjectConfiguration>
   </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="ares.h" />
+    <ClInclude Include="ares_compat.h" />
+    <ClInclude Include="ares_dns.h" />
+    <ClInclude Include="ares_local.h" />
+    <ClInclude Include="ares_private.h" />
+    <ClInclude Include="ares_socketfunc.h" />
+    <ClInclude Include="ares_version.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="ares_destroy.cxx" />
+    <ClCompile Include="ares_expand_name.cxx" />
+    <ClCompile Include="ares_fds.cxx" />
+    <ClCompile Include="ares_free_errmem.cxx" />
+    <ClCompile Include="ares_free_hostent.cxx" />
+    <ClCompile Include="ares_free_string.cxx" />
+    <ClCompile Include="ares_gethostbyaddr.cxx" />
+    <ClCompile Include="ares_gethostbyname.cxx" />
+    <ClCompile Include="ares_init.cxx" />
+    <ClCompile Include="ares_local.cxx" />
+    <ClCompile Include="ares_mkquery.cxx" />
+    <ClCompile Include="ares_parse_a_reply.cxx" />
+    <ClCompile Include="ares_parse_ptr_reply.cxx" />
+    <ClCompile Include="ares_process.cxx" />
+    <ClCompile Include="ares_query.cxx" />
+    <ClCompile Include="ares_search.cxx" />
+    <ClCompile Include="ares_send.cxx" />
+    <ClCompile Include="ares_strerror.cxx" />
+    <ClCompile Include="ares_timeout.cxx" />
+    <ClCompile Include="ares__close_sockets.cxx" />
+    <ClCompile Include="ares__get_hostent.cxx" />
+    <ClCompile Include="ares__read_line.cxx" />
+  </ItemGroup>
   <PropertyGroup Label="Globals">
     <ProjectName>ares</ProjectName>
     <ProjectGuid>{CE7CF5E0-CAD1-49D6-95D1-143DED7B226E}</ProjectGuid>
@@ -355,6 +388,9 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>stdcpp17</LanguageStandard>
+      <CompileAs>CompileAsCpp</CompileAs>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -420,6 +456,7 @@
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <AdditionalIncludeDirectories>..\..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <CompileAs>CompileAsCpp</CompileAs>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -433,6 +470,9 @@
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <AdditionalIncludeDirectories>..\..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <LanguageStandard>stdcpp17</LanguageStandard>
+      <CompileAs>CompileAsCpp</CompileAs>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -449,37 +489,6 @@
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
-  <ItemGroup>
-    <ClCompile Include="ares__close_sockets.c" />
-    <ClCompile Include="ares__get_hostent.c" />
-    <ClCompile Include="ares__read_line.c" />
-    <ClCompile Include="ares_destroy.c" />
-    <ClCompile Include="ares_expand_name.c" />
-    <ClCompile Include="ares_fds.c" />
-    <ClCompile Include="ares_free_errmem.c" />
-    <ClCompile Include="ares_free_hostent.c" />
-    <ClCompile Include="ares_free_string.c" />
-    <ClCompile Include="ares_gethostbyaddr.c" />
-    <ClCompile Include="ares_gethostbyname.c" />
-    <ClCompile Include="ares_init.c" />
-    <ClCompile Include="ares_local.c" />
-    <ClCompile Include="ares_mkquery.c" />
-    <ClCompile Include="ares_parse_a_reply.c" />
-    <ClCompile Include="ares_parse_ptr_reply.c" />
-    <ClCompile Include="ares_process.c" />
-    <ClCompile Include="ares_query.c" />
-    <ClCompile Include="ares_search.c" />
-    <ClCompile Include="ares_send.c" />
-    <ClCompile Include="ares_strerror.c" />
-    <ClCompile Include="ares_timeout.c" />
-  </ItemGroup>
-  <ItemGroup>
-    <ClInclude Include="ares.h" />
-    <ClInclude Include="ares_compat.h" />
-    <ClInclude Include="ares_dns.h" />
-    <ClInclude Include="ares_local.h" />
-    <ClInclude Include="ares_private.h" />
-  </ItemGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
   </ImportGroup>
diff --git a/rutil/dns/ares/ares_17_0.vcxproj b/rutil/dns/ares/ares_17_0.vcxproj
index 2be08eb67..683ead52b 100644
--- a/rutil/dns/ares/ares_17_0.vcxproj
+++ b/rutil/dns/ares/ares_17_0.vcxproj
@@ -50,6 +50,39 @@
       <Platform>x64</Platform>
     </ProjectConfiguration>
   </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="ares.h" />
+    <ClInclude Include="ares_compat.h" />
+    <ClInclude Include="ares_dns.h" />
+    <ClInclude Include="ares_local.h" />
+    <ClInclude Include="ares_private.h" />
+    <ClInclude Include="ares_socketfunc.h" />
+    <ClInclude Include="ares_version.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="ares_destroy.cxx" />
+    <ClCompile Include="ares_expand_name.cxx" />
+    <ClCompile Include="ares_fds.cxx" />
+    <ClCompile Include="ares_free_errmem.cxx" />
+    <ClCompile Include="ares_free_hostent.cxx" />
+    <ClCompile Include="ares_free_string.cxx" />
+    <ClCompile Include="ares_gethostbyaddr.cxx" />
+    <ClCompile Include="ares_gethostbyname.cxx" />
+    <ClCompile Include="ares_init.cxx" />
+    <ClCompile Include="ares_local.cxx" />
+    <ClCompile Include="ares_mkquery.cxx" />
+    <ClCompile Include="ares_parse_a_reply.cxx" />
+    <ClCompile Include="ares_parse_ptr_reply.cxx" />
+    <ClCompile Include="ares_process.cxx" />
+    <ClCompile Include="ares_query.cxx" />
+    <ClCompile Include="ares_search.cxx" />
+    <ClCompile Include="ares_send.cxx" />
+    <ClCompile Include="ares_strerror.cxx" />
+    <ClCompile Include="ares_timeout.cxx" />
+    <ClCompile Include="ares__close_sockets.cxx" />
+    <ClCompile Include="ares__get_hostent.cxx" />
+    <ClCompile Include="ares__read_line.cxx" />
+  </ItemGroup>
   <PropertyGroup Label="Globals">
     <ProjectName>ares</ProjectName>
     <ProjectGuid>{CE7CF5E0-CAD1-49D6-95D1-143DED7B226E}</ProjectGuid>
@@ -355,6 +388,8 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+      <CompileAs>CompileAsCpp</CompileAs>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -433,6 +468,7 @@
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <AdditionalIncludeDirectories>..\..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <CompileAs>CompileAsCpp</CompileAs>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -446,40 +482,10 @@
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <AdditionalIncludeDirectories>..\..\..\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <CompileAs>CompileAsCpp</CompileAs>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
-  <ItemGroup>
-    <ClCompile Include="ares__close_sockets.c" />
-    <ClCompile Include="ares__get_hostent.c" />
-    <ClCompile Include="ares__read_line.c" />
-    <ClCompile Include="ares_destroy.c" />
-    <ClCompile Include="ares_expand_name.c" />
-    <ClCompile Include="ares_fds.c" />
-    <ClCompile Include="ares_free_errmem.c" />
-    <ClCompile Include="ares_free_hostent.c" />
-    <ClCompile Include="ares_free_string.c" />
-    <ClCompile Include="ares_gethostbyaddr.c" />
-    <ClCompile Include="ares_gethostbyname.c" />
-    <ClCompile Include="ares_init.c" />
-    <ClCompile Include="ares_local.c" />
-    <ClCompile Include="ares_mkquery.c" />
-    <ClCompile Include="ares_parse_a_reply.c" />
-    <ClCompile Include="ares_parse_ptr_reply.c" />
-    <ClCompile Include="ares_process.c" />
-    <ClCompile Include="ares_query.c" />
-    <ClCompile Include="ares_search.c" />
-    <ClCompile Include="ares_send.c" />
-    <ClCompile Include="ares_strerror.c" />
-    <ClCompile Include="ares_timeout.c" />
-  </ItemGroup>
-  <ItemGroup>
-    <ClInclude Include="ares.h" />
-    <ClInclude Include="ares_compat.h" />
-    <ClInclude Include="ares_dns.h" />
-    <ClInclude Include="ares_local.h" />
-    <ClInclude Include="ares_private.h" />
-  </ItemGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
   </ImportGroup>
diff --git a/rutil/dns/ares/ares_local.h b/rutil/dns/ares/ares_local.h
index a344df7f3..29b780b44 100644
--- a/rutil/dns/ares/ares_local.h
+++ b/rutil/dns/ares/ares_local.h
@@ -8,16 +8,23 @@
 **
 */
 
-int ares_local_gethostbyname(ares_channel channel, const char *name, int family,
-                              ares_host_callback callback, void *arg);
 
-int ares_local_gethostbyaddr(ares_channel channel, const char *addr, int addrlen,
-                              int family, ares_host_callback callback, void*arg);
+namespace resip
+{
 
-int ares_local_query(ares_channel channel, const char *name, int dnsclass,
-                      int type, ares_callback callback, void *arg);
 
+	int ares_local_gethostbyname(ares_channel channel, const char *name, int family,
+		ares_host_callback callback, void *arg);
 
-void ares_local_process_requests();
+	int ares_local_gethostbyaddr(ares_channel channel, const char *addr, int addrlen,
+		int family, ares_host_callback callback, void*arg);
+
+	int ares_local_query(ares_channel channel, const char *name, int dnsclass,
+		int type, ares_callback callback, void *arg);
+
+
+	void ares_local_process_requests();
+
+}
 
 #endif
diff --git a/rutil/dns/ares/ares_private.h b/rutil/dns/ares/ares_private.h
index 9effd6ec0..4f382c4bc 100644
--- a/rutil/dns/ares/ares_private.h
+++ b/rutil/dns/ares/ares_private.h
@@ -45,115 +45,120 @@
 #define PATH_HOSTS		"/etc/hosts"
 #endif
 
-struct send_request {
-  /* Remaining data to send */
-  const char *data;
-  int len;
+namespace resip
+{
 
-  /* Next request in queue */
-  struct send_request *next;
-};
+	struct send_request {
+		/* Remaining data to send */
+		const char *data;
+		int len;
 
-struct server_state {
+		/* Next request in queue */
+		struct send_request *next;
+	};
+
+	struct server_state {
 #ifdef USE_IPV6
-  // added by Rohan on 7-Sep-2004
-  // define address and family contructs for IPv6
-  u_int8_t family;
-  struct in6_addr addr6;
+		// added by Rohan on 7-Sep-2004
+		// define address and family contructs for IPv6
+		u_int8_t family;
+		struct in6_addr addr6;
 #endif
-  struct in_addr addr;
-  unsigned char physical_addr[MAX_ADAPTER_ADDRESS_LENGTH];
-  int physical_addr_len;
-  int default_localhost_server;
-
-  int udp_socket;
-  int tcp_socket;
-
-  /* Mini-buffer for reading the length word */
-  unsigned char tcp_lenbuf[2];
-  int tcp_lenbuf_pos;
-  int tcp_length;
-
-  /* Buffer for reading actual TCP data */
-  unsigned char *tcp_buffer;
-  int tcp_buffer_pos;
-
-  /* TCP output queue */
-  struct send_request *qhead;
-  struct send_request *qtail;
-};
-
-struct query {
-  /* Query ID from qbuf, for faster lookup, and current timeout */
-  unsigned short qid;
-  time_t timeout;
-
-  /* Query buf with length at beginning, for TCP transmission */
-  char *tcpbuf;
-  int tcplen;
-
-  /* Arguments passed to ares_send() (qbuf points into tcpbuf) */
-  const char *qbuf;
-  int qlen;
-  ares_callback callback;
-  void *arg;
-
-  /* Query status */
-  int itry;
-  int server;
-  int *skip_server;
-  int using_tcp;
-  int error_status;
-
-  /* Next query in chain */
-  struct query *next;
-};
-
-/* An IP address pattern; matches an IP address X if X & mask == addr */
-struct apattern {
-  struct in_addr addr;
-  struct in_addr mask;
-};
-
-struct ares_channeldata {
-  /* Configuration data */
-  int flags;
-  int timeout;
-  int tries;
-  int ndots;
-  int udp_port;
-  int tcp_port;
-  char **domains;
-  int ndomains;
-  struct apattern *sortlist;
-  int nsort;
-  char *lookups;
-
-  /* Server addresses and communications state */
-  struct server_state *servers;
-  int nservers;
-
-  /* ID to use for next query */
-  unsigned short next_id;
-
-  /* Active queries */
-  struct query *queries;
-
-  /* post socket creation function pointer */
-  socket_function_ptr socket_function;
-
-  /* poll() system support */
-  ares_poll_cb_func *poll_cb_func;
-  void* poll_cb_data;
-};
-
-void ares__send_query(ares_channel channel, struct query *query, time_t now);
-void ares__close_poll(ares_channel channel, int server_idx);
-void ares__close_sockets(struct server_state *server);
-int ares__get_hostent(FILE *fp, struct hostent **host);
-int ares__read_line(FILE *fp, char **buf, int *bufsize);
-
-void ares__kill_socket(int s);
+		struct in_addr addr;
+		unsigned char physical_addr[MAX_ADAPTER_ADDRESS_LENGTH];
+		int physical_addr_len;
+		int default_localhost_server;
+
+		int udp_socket;
+		int tcp_socket;
+
+		/* Mini-buffer for reading the length word */
+		unsigned char tcp_lenbuf[2];
+		int tcp_lenbuf_pos;
+		int tcp_length;
+
+		/* Buffer for reading actual TCP data */
+		unsigned char *tcp_buffer;
+		int tcp_buffer_pos;
+
+		/* TCP output queue */
+		struct send_request *qhead;
+		struct send_request *qtail;
+	};
+
+	struct query {
+		/* Query ID from qbuf, for faster lookup, and current timeout */
+		unsigned short qid;
+		time_t timeout;
+
+		/* Query buf with length at beginning, for TCP transmission */
+		char *tcpbuf;
+		int tcplen;
+
+		/* Arguments passed to ares_send() (qbuf points into tcpbuf) */
+		const char *qbuf;
+		int qlen;
+		ares_callback callback;
+		void *arg;
+
+		/* Query status */
+		int itry;
+		int server;
+		int *skip_server;
+		int using_tcp;
+		int error_status;
+
+		/* Next query in chain */
+		struct query *next;
+	};
+
+	/* An IP address pattern; matches an IP address X if X & mask == addr */
+	struct apattern {
+		struct in_addr addr;
+		struct in_addr mask;
+	};
+
+	struct ares_channeldata {
+		/* Configuration data */
+		int flags;
+		int timeout;
+		int tries;
+		int ndots;
+		int udp_port;
+		int tcp_port;
+		char **domains;
+		int ndomains;
+		struct apattern *sortlist;
+		int nsort;
+		char *lookups;
+
+		/* Server addresses and communications state */
+		struct server_state *servers;
+		int nservers;
+
+		/* ID to use for next query */
+		unsigned short next_id;
+
+		/* Active queries */
+		struct query *queries;
+
+		/* post socket creation function pointer */
+		socket_function_ptr socket_function;
+
+		/* poll() system support */
+		ares_poll_cb_func *poll_cb_func;
+		void* poll_cb_data;
+	};
+
+	void ares__send_query(ares_channel channel, struct query *query, time_t now);
+	void ares__close_poll(ares_channel channel, int server_idx);
+	void ares__close_sockets(struct server_state *server);
+	int ares__get_hostent(FILE *fp, struct hostent **host);
+	int ares__read_line(FILE *fp, char **buf, int *bufsize);
+
+	void ares__kill_socket(int s);
+
+}
 
 #ifdef WIN32
 #define strcasecmp(a,b) stricmp(a,b)
diff --git a/rutil/dns/ares/ares_socketfunc.h b/rutil/dns/ares/ares_socketfunc.h
index 01d849b05..8b4360030 100644
--- a/rutil/dns/ares/ares_socketfunc.h
+++ b/rutil/dns/ares/ares_socketfunc.h
@@ -12,7 +12,11 @@ typedef int Socket;
 typedef SOCKET Socket;
 #endif
 
-typedef void(*socket_function_ptr)(Socket s, int transportType, const char* file, int line);
+namespace resip
+{
+	typedef void(*socket_function_ptr)(Socket s, int transportType, const char* file, int line);
+
+}
 
 #endif
 
diff --git a/rutil/rutil_17_0.vcxproj b/rutil/rutil_17_0.vcxproj
index df0802a02..20473e305 100644
--- a/rutil/rutil_17_0.vcxproj
+++ b/rutil/rutil_17_0.vcxproj
@@ -292,6 +292,7 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -306,6 +307,7 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -318,6 +320,7 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -330,6 +333,7 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -342,6 +346,7 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -354,6 +359,7 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -366,6 +372,7 @@
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <AdditionalIncludeDirectories>$(ProjectDir)dns/ares;$(ProjectDir)../;$(ProjectDir)../contrib/fmt/include;$(ProjectDir)../contrib/opensslx64/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -378,6 +385,7 @@
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
       <AdditionalIncludeDirectories>$(ProjectDir)dns/ares;$(ProjectDir)../;$(ProjectDir)../contrib/fmt/include;$(ProjectDir)../contrib/opensslx64/include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -392,6 +400,7 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -406,6 +415,7 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -420,6 +430,7 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -434,6 +445,7 @@
       <PrecompiledHeader>
       </PrecompiledHeader>
       <WarningLevel>Level3</WarningLevel>
+      <LanguageStandard>Default</LanguageStandard>
     </ClCompile>
     <Lib />
   </ItemDefinitionGroup>
@@ -615,4 +627,4 @@
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
   </ImportGroup>
-</Project>
+</Project>
\ No newline at end of file
